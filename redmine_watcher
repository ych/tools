#!/usr/bin/env ruby

require 'net/http'
require 'net/smtp'
require 'rexml/document'
require 'rubygems'
require 'docopt'
require 'inifile'

doc = <<DOCOPT

Usage:
  #{__FILE__} site <site_url> [--config=<file>]
  #{__FILE__} key <atom_key_token> [--config=<file>]
  #{__FILE__} email <email_address> [--config=<file>]
  #{__FILE__} watch <issue_number> [--config=<file>]
  #{__FILE__} unwatch <issue_number> [--config=<file>]
  #{__FILE__} list [--config=<file>]
  #{__FILE__} fetch [--config=<file>]
  #{__FILE__} -h | --help
  #{__FILE__} --version

Options:
  -h --help        Show this screen.
  --version        Show version.
  --config=<file>  Assign path of the configure file.

DOCOPT

begin
  opt = Docopt::docopt(doc, version: '0.0.1')
rescue Docopt::Exit => e
  puts e.message
end


if opt != nil
  if opt["--config"] == nil
    file = "config.ini"
  else
    file = opt["--config"]
  end

  ini = IniFile.new(:filename => file)

  if opt["site"] == true
    ini["user"]["site"] = opt["<site_url>"]
    ini.write
  elsif opt["key"] == true
    ini["user"]["key"] = opt["<atom_key_token>"]
    ini.write
  elsif opt["email"] == true
    ini["user"]["email"] = opt["<email_address>"]
    ini.write
  elsif opt["watch"] == true
    ini["issues"][opt["<issue_number>"]] = ""
    ini.write
  elsif opt["unwatch"] == true
    ini["issues"].delete(opt["<issue_number>"])
    ini.write
  elsif opt["list"] == true
    print "The following issues are watched: #{ini["issues"].keys}\n"
  elsif opt["fetch"] == true
    if ini["user"]["site"] == nil || ini["user"]["key"] == nil
      print "You should set up site and key!\n"
      exit
    end
    ini["issues"].keys.each do |issue|
      uri = URI(sprintf("%s/issues/%s.atom", ini["user"]["site"], issue))
      params = {:key => ini["user"]["key"]}
      uri.query = URI.encode_www_form(params)
      res = Net::HTTP.get_response(uri)
      if res.is_a?(Net::HTTPSuccess)
	xmldoc = REXML::Document.new(res.body)
	if xmldoc.root.elements['entry'] != nil && xmldoc.root.elements['updated'].to_s != ini["issues"][issue]
	  #print "Issue #{issue} has new response!\n"
	  message = sprintf("From: Redmine Watcher <no-reply@exmaple.com>\nTo: User<%s>\nSubject: Issue %s has new response!\n\nPlease connect %s/issues/%s to read new response!", ini["user"]["email"], issue, ini["user"]["site"], issue)
	  Net::SMTP.start('localhost') do |smtp|
	    smtp.send_message message, "no-reply@example.com", ini["user"]["email"]
	  end
	  ini["issues"][issue] = xmldoc.root.elements['updated'].to_s
	  ini.write
        end
        #md5 = OpenSSL::Digest::MD5.new
        #md5 << res.body
	#if md5 != ini["issues"][issue]
	#  print "Issue #{issue} has new response!\n"
	#  ini["issues"][issue] = md5
	#  ini.write
	#end
      end
    end
  end
end
